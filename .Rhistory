load("D:/AAA---CUNEF2019 (trabajo actual)/Practica4Cunef2019/.RData")
library(readr)
sleep2 <- read_csv("sleep2.csv")
View(sleep2)
View(sleep)
View(sleep2)
# 1. Crear un nuevo proyecto denominado pr?ctica 4.
# 2. Mediante la librer?a readr, leemos los datasets sleep.csv  y activities.csv
# ambos archivos deber?n estar en la carpeta del proyecto creado
library(readr)
sleep <- read_csv("sleep.csv")
View(sleep)
View(df)
plot(activities$Timezone)
plot(df$fechas_actividades, color=activities$Timezone)
View(activities)
ggplot(activities)+
geom_ppoint(mapping=aes(x=de, y=a, color=Timezone))
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot(activities)+
geom_ppoint(mapping=aes(x=de, y=a, color=Timezone))
library("tidyverse", lib.loc="~/R/win-library/3.5")
ggplot(activities)+
geom_ppoint(mapping=aes(x=de, y=a, color=Timezone))
ggplot(activities)+
geom_point(mapping=aes(x=de, y=a, color=Timezone))
ggplot(activities)+
geom_point(mapping=aes(x=de, color=Timezone))
plot(df$fechas_actividades, col=df$fechas_actividades)
ggplot(activities)+
geom_point(mapping=aes(x=de, y= a  ,color=Timezone))
plot(df$fechas_actividades, col=df$fechas_actividades)
ciudad<-activities$Timezone
df<-data.frame(fechas_actividades, ciudad)
fechasAC<-as.Date(activities$de)
df<-data.frame(fechasAC, ciudad)
View(df)
dfunique<-unique(df)
View(activities)
df<-data.frame(fechasAC, ciudad,tipoAC)
tipoAC<-activities$`Activity type`
df<-data.frame(fechasAC, ciudad,tipoAC)
dfunique<-unique(df)
View(dfunique)
View(sleep)
# 5. Crea un nuevo data.frame con las columnas de sleep siguientes:
# "de", "a", "ligero", "profundo", "despierto"
sleep_reducido<-select(sleep, 1:9)
View(sleep_reducido)
sleep_reducido<-select(sleep_reducido,-5)
View(sleep_reducido)
# 6. Comprueba la longitud de dfunique y sleep_reducido
# si son distintas calcula un vector booleano con las coincidencias
# en las fechas.
fechasACreducido<-dfunique$fechasAC
fechas_dormir<-as.Date(sleep$de)
iguales<-(fechasACreducido==fechas_dormir)
lon<-min(lenght(fechasACreducido),length(fechas_dormir))
lon<-min(length(fechasACreducido),length(fechas_dormir))
(lon<-min(length(fechasACreducido),length(fechas_dormir)))
iguales<-(fechasACreducido[1:lon]==fechas_dormir[1:lon])
iguales
View(sleep2)
# 7. Visualizar la Relación
plot(sleep_reducido$`profundo (s)`)
sleep_reducido<-rename(sleep_reducido, ligero='ligero (s)')
sleep_reducido<-rename(sleep_reducido, profundo='profundo (s)')
sleep_reducido<-mutate(sleep_reducido, total=ligero+profundo)
plot(sleep_reducido$total)
sleep_reducido<-mutate(sleep_reducido, total=(ligero+profundo)/3600)
plot(sleep_reducido$total)
sleep_reducido<-mutate(sleep_reducido, total_horas=(ligero+profundo)/3600)
plot(sleep_reducido$total_horas)
ggplot(sleep_reducido)+
geom_point(mapping=aes(x=ligero, y= profundo  ,color='b'))
ggplot(sleep_reducido)+
geom_point(mapping=aes(x=ligero, y= profundo,color=despertar))
ggplot(sleep_reducido)+
geom_point(mapping=aes(x=ligero, y= total,color=despertar))
ggplot(sleep_reducido)+
geom_point(mapping=aes(x=profundo, y= total,color=despertar))
inuevo<-0
i<-1
while (i <length(dfunique)){
for (j in 1: length(sleep_reducido)) {
if (dfunique[i,"fechasAC"]==as.Date(sleep_reducido[j,"de"]))
{inuevo[i]<-j; i<-i+1}
}
}
sleep_reducido[j,"de"]
as.Date(sleep_reducido[j,"de"])
as.Date.POSIXct(sleep_reducido[j,"de"])
sleep_reducido[j,"de"]
sleep_reducido[j,"de"
]
write.csv(sleep_reducido,"sleep2.csv")
library(readr)
sleep2 <- read_csv("sleep2.csv")
View(sleep2)
sleep2[j,"de"]
as.Date.POSIXct(sleep2[j,"de"])
as.character.Date(sleep2[j,"de"])
as.character(sleep2[j,"de"])
sleep2[j,"de"]
date(sleep2[j,"de"])
sleep2[j,"de"])
sleep2[j,"de"]
(dfunique[i,"fechasAC"]==sleep2[j,"de"])
i
j
(fechasACreducido==fechas_dormir)
(fechasACreducido==fechas_dormir[5:191])
s2<-as.Date(sleep2$de)
while (i <length(dfunique)){
for (j in 1: length(sleep_reducido)) {
if (dfunique[i,"fechasAC"]==s2[j])
{inuevo[i]<-j; i<-i+1}
}
}
library(readr)
sleep <- read_csv("sleep.csv")
activities<-read_csv("activities.csv")
View(activities)
View(sleep)
View(activities)
View(sleep)
View(activities)
View(sleep)
install.packages("tidyverse")
library("tidyverse", lib.loc="~/R/win-library/3.5")
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-9
act_new<-select(actividades, 1:2, 5:9)
sleep <- read_csv("sleep.csv")
actividades<-read_csv("activities.csv")
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-9
act_new<-select(actividades, 1:2, 5:9)
View(act_new)
act_new<-select(actividades, -(3:4),-(7:9))
View(act_new)
act_new<-select(actividades, 1,2,5,6)
View(act_new)
# Renombrar la variable 'Activity type' con el nombre 'tipo'
act_new<-rename(new_act, tipo='Activity type' )
# Renombrar la variable 'Activity type' con el nombre 'tipo'
act_new<-rename(act_new, tipo='Activity type' )
View(act_new)
# Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new, tipo='Activity type', ciudad='Time zone' )
# Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new, tipo='Activity type', ciudad='Timezone' )
View(act_new)
act_new<-select(actividades, 1,2,5,6)
View(act_new)
# Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new, tipo='Activity type', ciudad='Timezone' )
View(act_new)
# recuento de tipo de actividad:
summary(act_new$tipo)
# recuento de tipo de actividad:
summary(as.factor(act_new$tipo))
act_new$tipo<-as.factor(act_new$tipo)
plot(act_new$tipo)
summary(as.factor(act_new$tipo))
plot(act_new$tipo, main="Actividades realizadas")
act_new$ciudad<-as.factor(act_new$ciudad)
summary(as.factor(act_new$ciudad))
plot(act_new$ciudad, main="Ciudades visitadas")
act_new_Amsterdam<-filter(act_new, ciudad=Amsterdam)
act_new_Amsterdam<-filter(act_new, ciudad==Amsterdam)
act_new_Amsterdam<-filter(act_new, ciudad=="Europe/Amsterdam")
View(act_new_Amsterdam)
summary(act_new_Amsterdam$tipo)
plot(act_new_Amsterdam$tipo, main="Actividades realizadas en Amsterdam")
act_new_Madrid<-filter(act_new, ciudad=="Europe/Amsterdam")
summary(act_new_Madrid$tipo)
plot(act_new_Madrid$tipo, main="Actividades realizadas en Madrid")
act_new_Madrid<-filter(act_new, ciudad=="Europe/Madrid")
summary(act_new_Madrid$tipo)
plot(act_new_Madrid$tipo, main="Actividades realizadas en Madrid")
act_new_Amsterdam<-filter(act_new, ciudad=="Europe/Amsterdam")
summary(act_new_Amsterdam$tipo)
plot(act_new_Amsterdam$tipo, main="Actividades realizadas en Amsterdam")
act_new_Madrid<-filter(act_new, ciudad=="Europe/Madrid")
summary(act_new_Madrid$tipo)
plot(act_new_Madrid$tipo, main="Actividades realizadas en Madrid")
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el año 2018
fiter(act_new, ciudad=="Europe/Amsterdam", tipo %in% c(Cycling, Pilates)
)
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el año 2018
filter(act_new, ciudad=="Europe/Amsterdam", tipo %in% c(Cycling, Pilates))
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el año 2018
filter(act_new, ciudad=="Europe/Amsterdam", tipo %in% c("Cycling", "Pilates"))
#9. Transformar a Date el campo 'de' para determinar cuántos deportes se han
#practicado cada día en Amsterdam
act_new_Amsterdam$de<-as.Date(act_new_Amsterdam$de)
View(act_new_Amsterdam)
ggplot(act_new_Amsterdam)+
geom_point(mapping=aes(x=de, y= a  ,color=tipo))
ggplot(act_new_Amsterdam)+
geom_point(mapping=aes(x=de, y= a  ,color=tipo))
act_new_Amsterdam$a<-as.Date(act_new_Amsterdam$a)
View(act_new)
mutate(act_new_Amsterdam, dif=a-de)
View(act_new)
mutate(act_new, dif=a-de)
act_new_Amsterdam<-filter(act_new, ciudad=="Europe/Amsterdam")
act_new_Amsterdam<-mutate(act_new, dif=a-de)
View(act_new_Amsterdam)
plot(act_new_Amsterdam$dif)
plot(act_new_Amsterdam$tipo, act_new_Amsterdam$dif)
plot(act_new_Amsterdam$tipo, act_new_Amsterdam$dif, xlab("deporte"),ylab("minutos"))
?plot
plot(act_new_Amsterdam$tipo, act_new_Amsterdam$dif, xlab="deporte",ylab)="minutos")
plot(act_new_Amsterdam$tipo, act_new_Amsterdam$dif, xlab="deporte",ylab="minutos")
actividades<-read_csv("activities.csv")
View(actividades)
#10. Cargar el dataset sleep en un objeto llamado sleep
sleep<-read_csv("sleep.csv")
View(sleep)
actividades<-read_csv("activities.csv")
#10. Contar cuantos NAs hay en la columna GPS del dataset activities
count(actividades$GPS, is.na==TRUE)
#10. Contar cuantos NAs hay en la columna GPS del dataset activities
count(is.na(actividades$GPS)
)
actividades$GPS
is.na(actividades$GPS)
#10. Contar cuantos NAs hay en la columna GPS del dataset activities
sum(is.na(actividades$GPS))
sum(sleep$`Snoring (s)`)
#-------------------------------
#-----SEGUNDA PARTE-------------
# 11. Cargar el dataset sleep en un objeto llamado sleep
sleep<-read_csv("sleep.csv")
View(sleep)
sum(sleep$`Snoring (s)`)
sum(sleep$`Snoring (s)`, rm.na=TRUE)
sum(sleep$`Snoring (s)`, na.rm=TRUE)
sleep_new<-select(sleep, 1:4, 6:10)
View(sleep_new)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='roncar (s)')
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, (is.na(ligero)|is.na(profundo)|is.na(nroncar)))
sleep_new<-select(sleep, 1:4, 6:10)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, (is.na(ligero)|is.na(profundo)|is.na(nroncar)))
sleep_new<-select(sleep, 1:4, 6:10)
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, (is.na(ligero)|is.na(profundo)|is.na(nroncar)))
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, (is.na(ligero)|is.na(profundo)|is.na(nroncar)))
View(sleep_new)
sleep_new<-select(sleep, 1:4, 6:10)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, !(is.na(ligero)|is.na(profundo)|is.na(nroncar)))
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new, totalsleep=ligero+profundo)
View(sleep_new)
ggplot(sleep_new)+
geom_point(mapping=aes(x=ligero, y= profundo  ,color=nroncar))
ggplot(sleep_new)+
geom_point(mapping=aes(x=ligero, y= totalsleep  ,color=nroncar))
ggplot(sleep_new)+
geom_point(mapping=aes(x=profundo, y= totalsleep  ,color=nroncar))
# A la vista de los resultados, que tipo de sueño es mas relevante?
# 17. Realizar un analisis de diferencias entre los dos tipos de sueño
# calulamos la diferencia y lo almacenamos en otra variable:
diferencias<-sleep_new$ligero-sleep_new$profundo
diferencias
ICalpha<-function(ModeloA, ModeloB, alfa)
{
n<-length(ModeloA)
diferencias<-ModeloA-ModeloB
mediad<-mean(diferencias)
#mediad2<-mean(diferencias^2)
s<-sqrt(var(diferencias))
#s<-sqrt(mediad2-mediad^2)
valort<-qt(alfa/2,7,lower.tail = F)
valor<-valort*s/sqrt(n)
cotaInf<-mediad-valor
cotaSup<-mediad+valor
df<-data.frame(cotaInf, cotaSup)
return(df)
}
ICalpha(sleep_new$ligero,sleep_new$profundo,0.05)
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(actividades, 1:2, 5:6)
actividades<-read_csv("activities.csv")
library(readr)
sleep <- read_csv("sleep.csv")
actividades<-read_csv("activities.csv")
# 3.Comprobar el contenido  con View y contar cuantos NAs hay en la columna GPS del dataset activities
View(actividades, "Actividades")
sum(is.na(actividades$GPS))
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(actividades, 1:2, 5:6)
act_new<-select(actividades, -(3:4),-(7:9))
act_new<-select(actividades, 1,2,5,6)
act_new<-rename(act_new, tipo='Activity type', ciudad='Timezone' )
act_new$tipo<-as.factor(act_new$tipo)
summary(act_new$tipo)
plot(act_new$tipo, main="Actividades realizadas")
act_new$ciudad<-as.factor(act_new$ciudad)
summary(as.factor(act_new$ciudad))
plot(act_new$ciudad, main="Ciudades visitadas")
act_new_Amsterdam<-filter(act_new, ciudad=="Europe/Amsterdam")
summary(act_new_Amsterdam$tipo)
plot(act_new_Amsterdam$tipo, main="Actividades realizadas en Amsterdam")
act_new_Madrid<-filter(act_new, ciudad=="Europe/Madrid")
summary(act_new_Madrid$tipo)
plot(act_new_Madrid$tipo, main="Actividades realizadas en Madrid")
#8. Encontrar las fechas en las que se ha practicado bicicleta o pilates en Amsterdam en el año 2019
filter(act_new, ciudad=="Europe/Amsterdam", tipo %in% c("Cycling", "Pilates"))
act_new_Amsterdam<-mutate(act_new, dif=a-de)
plot(act_new_Amsterdam$tipo, act_new_Amsterdam$dif, xlab="deporte",ylab="minutos")
#10. Guardar el nuevo dataset en un archivo llamado  "act_new.csv"
write.csv(act_new, "act_new.csv")
sleep<-read_csv("sleep.csv")
#12. crear un nuevo data set llamado sleep_new que contenga solo las variables
#que contengan información, que no sean todo cero.
sum(sleep$`Snoring (s)`, na.rm=TRUE) #compruebo que tiene info
sleep_new<-select(sleep, 1:4, 6:10)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, !(is.na(ligero)|is.na(profundo)|is.na(nroncar)))
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new, totalsleep=ligero+profundo)
ggplot(sleep_new)+
geom_point(mapping=aes(x=ligero, y= profundo  ,color=nroncar))
ggplot(sleep_new)+
geom_point(mapping=aes(x=ligero, y= totalsleep  ,color=nroncar))
ggplot(sleep_new)+
geom_point(mapping=aes(x=profundo, y= totalsleep  ,color=nroncar))
# A la vista de los resultados, que tipo de sueño es mas relevante?
# 17. Realizar un analisis de diferencias entre los dos tipos de sueño e interpretar los resultados
# usar la función ICalpha o el 'One sample t-test' de TeachingDemos: t.test()
ICalpha(sleep_new$ligero,sleep_new$profundo,0.05)
sleep <- read_csv("sleep.csv")
actividades<-read_csv("activities.csv")
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(actividades, 1:2, 5:6)
# 5. Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new, tipo='Activity type', ciudad='Timezone' )
act_new$tipo<-as.factor(act_new$tipo)
act_new$ciudad<-as.factor(act_new$ciudad)
View(act_new)
sleep_new<-select(sleep, 1:4, 6:10)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new, totalsleep=ligero+profundo)
View(sleep_new)
for (i in 1:196){
for (j in (1:312)) {
if (i==actividades$de[j]) sleep$ciudad[i]<-actividades$Timezone[j]
}
}
View(sleep_new)
View(sleep)
sleep$ciudad<-sleep$`Rem (seg)`
for (i in 1:196){
for (j in (1:312)) {
if (i==actividades$de[j]) sleep$ciudad[i]<-actividades$Timezone[j]
}
}
View(sleep)
sleep$ciudad[i]
actividades$Timezone[j]
for (i in 1:196){
for (j in (1:312)) {
if (sleep$de==actividades$de[j]) sleep$ciudad[i]<-actividades$Timezone[j]
}
}
View(sleep)
for (i in 1:196){
for (j in (1:312)) {
if (sleep$de[i]==actividades$de[j]) sleep$ciudad[i]<-actividades$Timezone[j]
}
}
View(sleep)
sleep$de[i]
actividades$de[j]
for (i in 1:196){
for (j in (1:312)) {
if (as.Date(sleep$de[i])==as.Date(actividades$de[j])) sleep$ciudad[i]<-actividades$Timezone[j]
}
}
View(sleep)
#19. Representar la relación totalsleep y profundo usando como facetas el factor ciudad
sleep$ciudad<-as.factor(sleep$ciudad)
ggplot(sleep)+
geom_point(mapping=aes(x=ligero, y= profundo  ,color=ciudad))
ggplot(sleep)+
geom_point(mapping=aes(x='ligero (s)', y= 'profundo (s)'  ,color=ciudad))
sleep_new<-select(sleep, 1:4, 6:10)
#13. Renombrar las variables de sleep_new a nombres cortos:
sleep_new<-rename(sleep_new, ligero='ligero (s)', profundo='profundo (s)', nroncar='Snoring (s)')
#14. Eliminar todas las filas que contengan algún NA
sleep_new<-filter(sleep_new, !(is.na(ligero)|is.na(profundo)|is.na(nroncar)))
# 15. Calcular cuanto tiempo en total se ha dormido cada noche: ligero+profundo
sleep_new<-mutate(sleep_new, totalsleep=ligero+profundo)
# 4. Crear un objeto R denominado act_new que contenga solo las variables
# siguientes: 1,2,5-6
act_new<-select(actividades, 1:2, 5:6)
act_new$tipo<-as.factor(act_new$tipo)
act_new$ciudad<-as.factor(act_new$ciudad)
# 5. Renombrar la variable 'Activity type' con el nombre 'tipo' y la variable 'Time zone' como 'ciudad'
act_new<-rename(act_new, tipo='Activity type', ciudad='Timezone' )
View(act_new)
#18. Crear una nueva variable 'ciudad' en sleep_new con la informacion de act_new.
sleep_new$ciudad<-sleep_new$nroncar #truco para crear el espacio
for (i in 1:length(sleep_new$de)){
for (j in (1:length(act_new$de))) {
if (as.Date(sleep_new$de[i])==as.Date(act_new$de[j])) sleep_new$ciudad[i]<-act_new$ciudad[j]
}
}
View(act_new)
View(sleep_new)
#18. Crear una nueva variable 'ciudad' en sleep_new con la informacion de act_new.
sleep_new$ciudad<-NA #sleep_new$nroncar #truco para crear el espacio
for (i in 1:length(sleep_new$de)){
for (j in (1:length(act_new$de))) {
if (as.Date(sleep_new$de[i])==as.Date(act_new$de[j])) sleep_new$ciudad[i]<-act_new$ciudad[j]
else
}
}
for (i in 1:length(sleep_new$de)){
for (j in (1:length(act_new$de))) {
if (as.Date(sleep_new$de[i])==as.Date(act_new$de[j])) sleep_new$ciudad[i]<-act_new$ciudad[j]
}
}
plot(sleep_new$ciudad)
sleep_new$ciudad<-as.factor(sleep_new$ciudad)
ggplot(sleep_new)+
geom_point(mapping=aes(x=ligero, y= profundo , color=ciudad))
ggplot(sleep_new)+
geom_point(mapping=aes(x=profundo, y= totalsleep , color=ciudad))
ggplot(sleep_new)+
geom_point(mapping=aes(x=profundo, y= totalsleep))+
facet_grid(.~ciudad)
#20. Guardar el dataset sleep_new en un archivo "sleep_new.csv"
write.csv(sleep_new, "sleep_new.csv")
View(sleep_new)
library(readr)
sleep <- read_csv("sleep.csv")
actividades<-read_csv("activities.csv")
actividades<-read.csv("activities.csv")
